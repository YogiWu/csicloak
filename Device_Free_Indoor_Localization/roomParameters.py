#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

@author: Felix Kosterhon

Defines the room variables:

- Room grids (depending on used positions for the measurement)
- Masks to filter it (same size as correspondig room)
- Areas for the used grids to filter it according to the areas, e.g. only left half etc. (last section)

"""

######################################## Room Variables #############################################################################
#####################################################################################################################################

import numpy as np

# Important notes:
# -5 = TX
# -7 = RX
#  0 = empty space
# -1 = obstacle
#  Baseline Room = Placeholder ! => Only one position
#  CoaxAntennas = Placeholder for the four antennas -> One position for each TX transmission

Baseline = [[1]]

CoaxAntennas = [[1,2,3,4]]

# --------------------------------------------------- Rooms ----------------------------------------------------------------------- #

# Numbers for each position indicate the order of the measurements and the position itself = coordinate in the room

# Classroom / NewBuilding Room Grid: For different amount of trainingpositions
Classroom =  np.array( [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
    			              [   0,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,   0,   0],
    			              [   0,   0,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,   0,   0],
    			              [   0,   0,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,   0,   0],
    			              [   0,   0,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,   0,   0],
    			              [   0,   0,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,   0,   0],
    			              [   0,   0, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,   0,   0],
    			              [   0,   0, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,   0,   0],
    			              [   0,  -7, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192,  -5,   0],
    			              [   0,   0, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,   0,   0],
    			              [   0,   0, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,   0,   0],
    			              [   0,   0, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264,   0,   0],
    			              [   0,   0, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288,   0,   0],
    			              [   0,   0, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312,   0,   0],
    			              [   0,   0, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,   0,   0],
    			              [   0,   0, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360,   0,   0],
    			              [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])

# This is used as example, as less data is needed => ExampleRoom
Classroom_12er = np.array(      [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   2,   0,   0,   0,   0,   3,   0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,  -7,   0,   0,   0,   0,   5,   0,   0,   0,   0,   6,   0,   0,   0,   0,   7,   0,   0,   0,   0,   8,   0,   0,   0,   0,  -5,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,  10,   0,   0,   0,   0,  11,   0,   0,   0,   0,  12,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                 [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])


# --------------------------------------------------- Masks ----------------------------------------------------------------------- #

# Every Mask has roughly 20k measurements in total
# Checkerboard1, Checkerboard1Inv, HalfPSplittedLeft, HalfPSplittedRight, Mask_MarginOnly : 120 Measurements * 180 Positions
# Mask_MarginMid : 120 Measurements * 184 Positions
# Checkerboard2 : 180 Measurements * 120 Positions 

# e.g. 5 => use 5 measurements for training/testing
# 0 => do not use it

# The following masks assume measurements for each of the 360 positions! (or at least for the positions, where they use measurements)
# Thus, this feature cannot be tried with the small example data set
# Alternatively, an own mask can be defined using a subset of the "Classroom_12er" reference positions

Mask_Checkerboard1 =  np.array(  [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,  -7,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,  -5,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                  [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                  [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])

Mask_Checkerboard1Inv =  np.array(   [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,  -7, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,  -5,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0,   0],
                                      [   0,   0,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])


Mask_Checkerboard2 =  np.array([[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                [   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0,   0],
                                [   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0],
                                [   0,   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0],
                                [   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0,   0],
                                [   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0],
                                [   0,   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0],
                                [   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0,   0],
                                [   0,  -7,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,  -5,   0],
                                [   0,   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0],
                                [   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0,   0],
                                [   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0],
                                [   0,   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0],
                                [   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0,   0],
                                [   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0,   0],
                                [   0,   0,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0, 180,   0,   0],
                                [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])


Mask_HalfPSplittedLeft =  np.array(  [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,  -7, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  -5,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])

Mask_HalfPSplittedRight =  np.array( [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,  -7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,  -5,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])

Mask_MarginOnly =          np.array( [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,  -7, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,  -5,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120, 120,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])


Mask_MarginMid =           np.array( [[   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,  -7, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,  -5,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 120,   0,   0],
                                      [   0,   0, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,   0,   0],
                                      [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])

# ------------------------------------------------ Areas ---------------------------------------------------------------------------- #

# Numbers > 0 = positions; 
# 0 = empty; 
# -1 = obstacle; 
# -7 = receiver & -5 = transmitter
# noPositions => do not consider all the positions, which are not used for measurements!

noPositions = set({0, -1, -5, -7})
Empty = {}

# ############################################# Areas for the Classroom: ########################################################## #

# Separated in columns: 2 - 5 - 10 - 5 - 2      VeryLeft | Left | Center | Right | VeryRight
ClassroomVeryLeft = (set(np.squeeze(np.reshape(Classroom[:,2:4],[-1,1])))).difference(noPositions)
ClassroomLeft = (set(np.squeeze(np.reshape(Classroom[:,4:9],[-1,1])))).difference(noPositions)
ClassroomCenter = (set(np.squeeze(np.reshape(Classroom[:,9:19],[-1,1])))).difference(noPositions)
ClassroomRight = (set(np.squeeze(np.reshape(Classroom[:,19:24],[-1,1])))).difference(noPositions)
ClassroomVeryRight = (set(np.squeeze(np.reshape(Classroom[:,24:26],[-1,1])))).difference(noPositions)

# Separated in rows: 2 - 3 - 5 - 3 - 2       Top | Upper | Mid | Lower | Bottom
ClassroomTop = (set(np.squeeze(np.reshape(Classroom[1:3,:],[-1,1])))).difference(noPositions)
ClassroomUpper = (set(np.squeeze(np.reshape(Classroom[3:6,:],[-1,1])))).difference(noPositions)
ClassroomMid = (set(np.squeeze(np.reshape(Classroom[6:11,:],[-1,1])))).difference(noPositions)
ClassroomLower = (set(np.squeeze(np.reshape(Classroom[11:14,:],[-1,1])))).difference(noPositions)
ClassroomBottom = (set(np.squeeze(np.reshape(Classroom[14:16,:],[-1,1])))).difference(noPositions)

ClassroomComplete = (set(np.squeeze(np.reshape(Classroom,[-1,1])))).difference(noPositions)

# Array / Collection of Rows / Columns correspond to the Enum classes!
ClassroomRows = [ClassroomComplete, Empty, ClassroomTop, ClassroomUpper, ClassroomMid, ClassroomLower, ClassroomBottom, ClassroomTop.union(ClassroomUpper), ClassroomBottom.union(ClassroomLower), ClassroomLower.union(ClassroomUpper.union(ClassroomMid))]
ClassroomCols = [ClassroomComplete, Empty, ClassroomVeryLeft, ClassroomLeft, ClassroomCenter, ClassroomRight, ClassroomVeryRight, ClassroomLeft.union(ClassroomVeryLeft), ClassroomRight.union(ClassroomVeryRight), ClassroomLeft.union(ClassroomCenter.union(ClassroomRight))]

##################################################################################################################################
